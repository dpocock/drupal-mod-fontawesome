<?php

/**
 * @file
 * Drupal integration with Font Awesome, the iconic font for use with Bootstrap.
 */

/**
 * Implements hook_help().
 */
function fontawesome_help($path, $arg) {
  switch ($path) {
  case 'admin/help#fontawesome':
    return '<p><i class="icon-flag icon-large"></i>' . t('<a href="@fontawesome">Font Awesome</a> is an iconic font designed for use with <a href="@bootstrap">Twitter Bootstrap</a>.', array(
      '@fontawesome' => 'http://fortawesome.github.com/Font-Awesome/',
      '@bootstrap' => 'http://twitter.github.com/bootstrap',
    )) . '</p>';
  }
}

/**
 * Implements hook_init().
 */
function fontawesome_init() {
  // Load up the Font Awesome CSS file.
  drupal_load('module', 'libraries');
  libraries_load('fontawesome');
}

/**
 * Implements hook_libraries_info().
 */
function fontawesome_libraries_info() {
  $libraries['fontawesome'] = array(
    'name' => 'Font Awesome',
    'vendor url' => 'http://fortawesome.github.com/Font-Awesome/',
    'download url' => 'https://github.com/FortAwesome/Font-Awesome/zipball/master',
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '/((?:\d+\.?){2,3})/',
      'lines' => 10,
      'cols' => 30,
    ),
    'files' => array(
      'css' => array(
        'css/font-awesome.css',
      ),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_icon_providers().
 */
function fontawesome_icon_providers() {
  $providers['fontawesome'] = array(
    'title' => t('fontawesome'),
    'url' => 'http://fontawesome.io',
    'default bundle' => array(
      'render' => 'html_tag',
      'settings' => fontawesome_default_settings(),
    ),
  );
  return $providers;
}


/**
 * Provide default bundle settings.
 */
function fontawesome_default_settings() {
  return array(
    'tag' => 'i',
  );
}

/**
 * Implements hook_icon_bundle_configure().
 */
function fontawesome_icon_bundle_configure(&$settings, &$form_state, &$complete_form) {
  $bundle = $form_state['bundle'];
  if ($bundle['provider'] === 'fontawesome') {
    $settings['tag'] = array(
      '#type' => 'select',
      '#title' => t('HTML Markup'),
      '#description' => t('Choose the HTML markup tag that Font Awesome icons should be created with.
        Typically, this is an %i tag, however it can be changed to suite the theme requirements.', array('%i' => '<i/>')),
      '#options' => drupal_map_assoc(array('i', 'span', 'div')),
      '#default_value' => $bundle['settings']['tag'],
    );
  }
}

/**
 * Define render hook information.
 *
 * @see hook_icon_render_hooks()
 */
function fontawesome_icon_render_hooks() {
  $hooks['html_tag'] = array();
  return $hooks;
}

/**
 * Implements hook_preprocess_icon().
 */
function fontawesome_preprocess_icon(&$variables) {
  if (!empty($variables['bundle']['provider']) && $variables['bundle']['provider'] === 'fontawesome') {
    $variables['attributes']['class'][] = 'fa';
  }
}


/**
 * @desc Implements hook_preprocess_icon_RENDER_HOOK().
 */
function fontawesome_preprocess_icon_html_tag(&$variables) {
  $bundle = &$variables['bundle'];
  $icon = &$variables['icon'];
  // Sanitize and add icon class here.
  $class = drupal_html_class($icon);
  if (is_numeric($class[0])) {
    $class = 'fa fa-' . $class;
  }
  $variables['attributes']['class'][] = $class;
}